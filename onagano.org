#+TITLE: User Specific Settings

* Available settings in standard distribution
** Better default settings
:PROPERTIES:
:ID: 9BF8236B-F1BC-41C8-9466-EF85FAEAF752
:END:
See "Emacs Technique Bible" by Rubikitch p.59.

#+begin_src emacs-lisp
(global-hl-line-mode 1)
(set-face-background 'hl-line "darkgreen")
(savehist-mode 1)
(setq-default save-place t)
(setq save-place-file "~/.emacs.d/state/emacs-places")
(require 'saveplace)
(setq savehist-file "~/.emacs.d/state/history")
(show-paren-mode 1)
(global-set-key (kbd "C-h") 'delete-backward-char)
(display-time)
(line-number-mode 1)
(column-number-mode 1)
(transient-mark-mode 1)
(setq gc-cons-threshold (* 10 gc-cons-threshold))
(setq message-log-max 10000)
(setq enable-recursive-minibuffers t)
(setq use-dialog-box nil)
(defalias 'message-box 'message)
(setq history-length 1000)
(setq echo-keystrokes 0.1)
(setq large-file-warning-threshold (* 25 1024 1024))
(defadvice abort-recursive-edit (before minibuffer-save activate)
  (when (eq (selected-window) (active-minibuffer-window))
    (add-to-history minibuffer-history-variable (minibuffer-contents))))
(defalias 'yes-or-no-p 'y-or-n-p)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(ffap-bindings)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(windmove-default-keybindings)
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat dotfiles-dir "backups")))))
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(setq frame-title-format '(buffer-file-name "%f" ("%b")))
  
(set-language-environment "Japanese")
(prefer-coding-system 'utf-8)
(setq file-name-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

** Better libraries
:PROPERTIES:
:ID: D56BDC95-A7F2-4241-A39C-119E3434E856
:END:
#+begin_src emacs-lisp
;; (iswitchb-mode 1)
;; (setq read-buffer-function 'iswitchb-read-buffer)
;; (setq iswitchb-regexp nil)
;; (setq iswitchb-prompt-newbuffer nil)
;; (ido-mode 1)
;; (ido-everywhere 1)

(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
(setq uniquify-ignore-buffers-re "*[^*]+*")

(setq bookmark-save-flag 1)
(progn
  (setq bookmark-sort-flag nil)
  (defun bookmark-arrange-latest-top ()
    (let ((latest (bookmark-get-bookmark bookmark)))
      (setq bookmark-alist (cons latest (delq latest bookmark-alist))))
    (bookmark-save))
  (add-hook 'bookmark-after-jump-hook 'bookmark-arrange-latest-top))
(setq bookmark-default-file "~/.emacs.d/state/emacs.bmk")

;; (setq server-host "localhost")
;; (setq server-use-tcp t)
;; (server-start)

(define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)

(auto-insert-mode)
(setq auto-insert-directory "~/.emacs.d/insert/")
;; (define-auto-insert "\\.txt$" "hoge-template.txt")
;; (define-auto-insert "\\.txt$" (lambda () (insert "time") (yas/expand)))

(defvar kmacro-save-file "~/.emacs.d/state/kmacro"
  "File that keeps your keyboard macros.")
(defun kmacro-save (symbol)
  (interactive "SName for last kbd macro: ")
  (name-last-kbd-macro symbol)
  (with-current-buffer (find-file-noselect kmacro-save-file)
    (goto-char (point-max))
    (insert-kbd-macro symbol)
    (basic-save-buffer)))
(if (file-exists-p kmacro-save-file) (load kmacro-save-file))

(global-set-key (kbd "C-c r") 'query-replace)
(defalias 'qrr 'query-replace-regexp)

(follow-mode)

(require 'hideif)
(add-hook 'c-mode-common-hook 'hide-ifdef-mode)

(which-func-mode 1)
(setq which-func-modes t)
;; (delete (assoc 'which-func-mode mode-line-format) mode-line-format)
;; (setq-default header-line-format '(which-func-mode ("" which-func-format)))

;; flymake-mode
;; http://www.emacswiki.org/emacs/FlyMake
;; Add following line into your Makefile.
;; CC=gcc
;; check-syntax:
;; <TAB>$(CC) $(CFLAGS) -Wall -Wextra -pedantic -fsyntax-only $(CHK_SOURCES)
;(add-hook 'c-mode-common-hook (lambda () (flymake-mode t)))
#+end_src

** Calendar and Diary
:PROPERTIES:
:ID: 8C09EDB4-8F66-496B-A42C-66C63FA02F0D
:END:
#+begin_src emacs-lisp
;; (setq calendar-latitude +35.427768)
;; (setq calendar-longitude +140.296875)
;; (setq calendar-location-name "Mobara, Japan")
;; (setq calendar-time-zone +540)
;; (setq calendar-standard-time-zone-name "JST")
;; (setq calendar-daylight-time-zone-name "JST")
;; (setq diary-file "~/org/diary")
;; (setq calendar-date-style 'iso)
;; ;(calendar-set-date-style 'iso)
;; (setq calendar-week-start-day 1) ; Monday
#+end_src

* Tools
** SKK
:PROPERTIES:
:ID: 35C8BAA7-0DD0-4785-8C5F-C3D824FE06BE
:END:
http://openlab.ring.gr.jp/skk/ddskk-ja.html

#+begin_src emacs-lisp
(setq skk-large-jisyo (concat dotfiles-dir "src/skk/dic/SKK-JISYO.L"))
#+end_src

** ESS-mode
:PROPERTIES:
:ID: 997B0B38-912D-4B5B-B055-6564C56411AE
:END:
http://ess.r-project.org/

#+begin_src emacs-lisp
(require 'ess-site)
#+end_src

** Twittering-mode
:PROPERTIES:
:ID: 477863B8-D001-4B46-9A15-C98052F27999
:END:
http://twmode.sourceforge.net/ja/

#+begin_src emacs-lisp
(require 'twittering-mode)
#+end_src

** Magit and Gist
:PROPERTIES:
:ID: 35530DF0-BA47-46AB-BF5B-9D3E0143F46E
:END:

#+begin_src emacs-lisp
(require 'magit)
(require 'gist)
#+end_src

** Text Translator
:PROPERTIES:
:ID: 371E9470-7143-40F5-85E1-4D0D4A9EF6B1
:END:
How to install:
#+begin_example
(auto-install-batch "text translator")
#+end_example

#+begin_src emacs-lisp
(require 'text-translator)
(setq text-translator-auto-selection-func
  'text-translator-translate-by-auto-selection-enja)
#+end_src

** Grep, lv
:PROPERTIES:
:ID: F2BCBE59-1535-4424-A869-A0C7A5E2A425
:END:
lv homepage:
http://www.ff.iij4u.or.jp/~nrt/lv/index.html

How to install:
#+begin_example
(install-elisp-from-emacswiki "igrep.el")
(install-elisp-from-emacswiki "grep-a-lot.el")
(install-elisp-from-emacswiki "grep-edit.el")
#+end_example

#+begin_src emacs-lisp
(require 'igrep)
(igrep-define lgrep (igrep-use-zgrep nil) (igrep-regex-option "-n -Ou8"))
(igrep-find-define lgrep (igrep-use-zgrep nil) (igrep-regex-option "-n -Ou8"))
(require 'grep-a-lot)
(grep-a-lot-setup-keys)
(grep-a-lot-advise igrep)
(require 'grep-edit)
#+end_src

** Fossil
:PROPERTIES:
:ID: F0D6DAD7-5ED7-4A28-A943-46710D5A0165
:END:
http://chiselapp.com/user/venks/repository/emacs-fossil/doc/tip/doc/index.wiki

#+begin_src emacs-lisp
(add-to-list 'vc-handled-backends 'Fossil)
(require 'vc-fossil)
#+end_src

** Gtags
:PROPERTIES:
:ID: 58B25BCF-14C5-4C2C-900D-FD8E7C7D74DC
:END:
http://www.tamacom.com/software-j.html

#+begin_src emacs-lisp
(require 'gtags)
(add-hook 'c-mode-common-hook 'gtags-mode)
(add-hook 'c++-mode-hook 'gtags-mode)
(add-hook 'java-mode-hook 'gtags-mode)
(setq gtags-path-style 'relative)
(setq gtags-read-only t)
;(setq gtags-pop-delete t)
#+end_src

** Color Theme
:PROPERTIES:
:ID: 5AB71DC5-CC22-4980-BFD4-26318C794702
:END:

#+begin_src emacs-lisp
(require 'color-theme)
(eval-after-load "color-theme"
  '(progn
     (color-theme-initialize)))
(color-theme-railscasts)
#+end_src

* Anything
:PROPERTIES:
:ID: 04447E96-E798-47F8-BD8C-7A26C6D784C9
:END:
How to install:
#+begin_example
(auto-install-batch "anything")
(install-elisp "http://svn.coderepos.org/share/lang/elisp/anything-c-moccur/trunk/anything-c-moccur.el")
#+end_example

#+begin_src emacs-lisp
(require 'anything-startup)
(setq descbinds-anything-window-style 'split-windo)

(require 'anything-c-moccur)
(global-set-key (kbd "M-s") 'anything-c-moccur-occur-by-moccur)
(define-key isearch-mode-map (kbd "C-o") 'anything-c-moccur-from-isearch)
(define-key isearch-mode-map (kbd "C-M-o") 'isearch-occur)

(setq anything-c-adaptive-history-file "~/.emacs.d/state/anything-c-adaptive-history")

(require 'anything-config)
(defun my-anything ()
  (interactive)
  (anything-other-buffer '(anything-c-source-buffers
                           anything-c-source-recentf)
                         "*my anything*"))
#+end_src

* My previous init.el
:PROPERTIES:
:ID: 7B27D1BF-C1EB-4E13-BFEB-FE40E9998BD9
:END:
#+begin_src emacs-lisp
  ;; auto-async-byte-compile.el
  ;; (install-elisp-from-emacswiki "auto-async-byte-compile.el")
  (require 'auto-async-byte-compile)
  (setq auto-async-byte-compile-exclude-files-regexp "\\(/.emacs.d/[^/]*.el$\\|/junk/\\)")
  (add-hook 'emacs-lisp-mode-hook 'enable-auto-async-byte-compile-mode)
  ;(auto-async-byte-compile-mode)

  
  ;; (install-elisp-from-emacswiki "sticky.el")
  (require 'sticky)
  (use-sticky-key ";" sticky-alist:en)
  
  
  ;; sequential-command.el (or smartchr.el)
  ;; (auto-install-batch "sequential-command")
  (require 'sequential-command-config)
  (sequential-command-setup-keys)
  
  
  ;; key-chord
  ;; (install-elisp-from-emacswiki "key-chord.el")
  ;; (install-elisp-from-emacswiki "space-chord.el")
  (require 'key-chord)
  (setq key-chord-two-keys-delay 0.04)
  (key-chord-mode 1)
  (require 'space-chord)
  (setq space-chord-delay 0.04)
  
  
  ;; minor-mode-hack.el
  ;; (install-elisp-from-emacswiki "minor-mode-hack.el")
  (require 'minor-mode-hack)
  
  
  ;; recentf.el
  ;; (install-elisp-from-emacswiki "recentf-ext.el")
  (setq recentf-save-file "~/.emacs.d/state/recentf")
  (setq recentf-max-saved-items 500)
  (setq recentf-exclude '("/TAGS$" "/var/tmp/"))
  (require 'recentf-ext)
  ;(setq ido-save-directory-list-file "~/.emacs.d/state/ido.last")
  ;(when (> emacs-major-version 21)
  ;  (ido-mode t)
  ;  (setq ido-enable-prefix nil
  ;        ido-enable-flex-matching t
  ;        ido-create-new-buffer 'always
  ;        ido-use-filename-at-point t
  ;        ido-max-prospects 10))
  
  
  ;; bm.el
  ;; (install-elisp "http://cvs.savannah.gnu.org/viewvc/*checkout*/bm/bm/bm.el")
  (setq-default bm-buffer-persistence nil)
  (setq bm-restore-repository-on-load t)
  (require 'bm)
  (add-hook 'find-file-hooks 'bm-buffer-restore)
  (add-hook 'kill-buffer-hook 'bm-buffer-save)
  (add-hook 'after-save-hook 'bm-buffer-save)
  (add-hook 'after-revert-hook 'bm-buffer-restore)
  (add-hook 'vc-before-checkin-hook 'bm-buffer-save)
  (global-set-key (kbd "M-SPC") 'bm-toggle)
  (global-set-key (kbd "M-[") 'bm-previous)
  (global-set-key (kbd "M-]") 'bm-next)
  
  
  ;; point-undo.el
  ;; (install-elisp-from-emacswiki "point-undo.el")
  (require 'point-undo)
  (define-key global-map (kbd "<f7>") 'point-undo)
  (define-key global-map (kbd "S-<f7>") 'point-redo)
  
  
  ;; goto-chg.el
  ;; (install-elisp-from-emacswiki "goto-chg.el")
  (require 'goto-chg)
  (define-key global-map (kbd "<f6>") 'goto-last-change)
  (define-key global-map (kbd "S-<f6>") 'goto-last-change-reverse)
  
  
  ;; tempbuf.el
  ;; (install-elisp-from-emacswiki "tempbuf.el")
  ;(require 'tempbuf)
  ;(add-hook 'find-file-hooks 'turn-on-tempbuf-mode)
  ;(add-hook 'dired-mode-hook 'turn-on-tempbuf-mode)
  
  
  ;; auto-save-buffers.el
  ;; (install-elisp "http://homepage3.nifty.com/oatu/emacs/archives/auto-save-buffers.el")
  (require 'auto-save-buffers)
  (run-with-idle-timer 300 t 'auto-save-buffers)
  ;(auto-save-buffers-toggle)
  
  
  ;; sense-region.el
  ;; (install-elisp "http://taiyaki.org/elisp/sense-region/src/sense-region.el")
  ;; Note that this overwrites "C-c r" and "M-r". I commented out them.
  (require 'sense-region)
  (sense-region-on)
  
  
  ;; color-moccur.el
  ;; (install-elisp-from-emacswiki "color-moccur.el")
  ;; (install-elisp-from-emacswiki "moccur-edit.el")
  (require 'color-moccur)
  (require 'moccur-edit)
  (setq mocccur-split-word t)
  
  
  ;; col-highlight.el
  ;; (auto-install-batch "col-highlight")
  (require 'col-highlight)
  ;; ;(column-highlight-mode 1)
  ;; (toggle-highlight-column-when-idle 1)
  ;; (col-highlight-set-interval 2)
  
  
  ;; shell-history.el
  ;; (install-elisp-from-emacswiki "shell-history.el")
  (require 'shell-history)
  (setq shell-history-file "~/.zdotdir/.zhistory")
  
  
  ;; text-adjust.el
  ;; (install-elisp "http://taiyaki.org/elisp/mell/src/mell.el")
  ;; (install-elisp "http://taiyaki.org/elisp/text-adjust/src/text-adjust.el")
  (require 'text-adjust)
  
  
  ;; viewer.el
  ;; (install-elisp-from-emacswiki "viewer.el")
  (require 'view)
  (define-key view-mode-map (kbd "N") 'View-search-last-regexp-backward)
  (define-key view-mode-map (kbd "?") 'View-search-regexp-backward)
  ;(define-key view-mode-map (kbd "G") 'View-goto-line-last)
  (define-key view-mode-map (kbd "b") 'View-scroll-page-backward)
  (define-key view-mode-map (kbd "f") 'View-scroll-page-forward)
  (define-key view-mode-map (kbd "h") 'backward-char)
  (define-key view-mode-map (kbd "j") 'next-line)
  (define-key view-mode-map (kbd "k") 'previous-line)
  (define-key view-mode-map (kbd "l") 'forward-line)
  (define-key view-mode-map (kbd "J") 'View-scroll-line-forward)
  (define-key view-mode-map (kbd "K") 'View-scroll-line-backward)
  (define-key view-mode-map (kbd "m") 'bm-toggle)
  (define-key view-mode-map (kbd "[") 'bm-previous)
  (define-key view-mode-map (kbd "]") 'bm-next)
  
  (require 'viewer)
  (setq view-read-only t)
  (viewer-stay-in-setup)
  (setq viewer-modeline-color-unwritable "tomato")
  (setq viewer-modeline-color-view "orange")
  (viewer-change-modeline-color-setup)
  (define-overriding-view-mode-map c-mode
    ("RET" . gtags-find-tag-from-here))
  (define-overriding-view-mode-map emacs-lisp-mode
    ("RET" . find-function-at-point))
  (setq view-mode-by-default-regexp "\\.log$")
  
  
  ;; eldoc.el
  ;; (install-elisp-from-emacswiki "eldoc-extension.el")
  ;; (install-elisp-from-emacswiki "c-eldoc.el")
  (require 'eldoc-extension)
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
  (setq eldoc-idle-delay 0.4)
  (setq eldoc-minor-mode-string "")
  
  
  ;; usage-memo.el
  ;; (install-elisp-from-emacswiki "usage-memo.el")
  (require 'usage-memo)
  (setq umemo-base-directory "~/.emacs.d/state/umemo")
  (umemo-initialize)
  
  
  ;; lispxmp.el
  ;; (install-elisp-from-emacswiki "lispxmp.el")
  (require 'lispxmp)
  
  
  ;; edit-list.el
  ;; (install-elisp "http://mwolson.org/static/dist/elisp/edit-list.el")
  (require 'edit-list)
  
  
  ;; el-expectations.el
  ;; (auto-install-batch "el-expectations")
  (require 'el-expectations)
  
  
  ;; open-junk-file.el
  ;; (install-elisp-from-emacswiki "open-junk-file.el")
  (require 'open-junk-file)
  (setq open-junk-file-format "~/junk/%Y/%m-%d-%H%M%S.")
  
  
  ;; summarye.el
  ;; (install-elisp-from-emacswiki "summarye.el")
  (require 'summarye)
  
  
  ;; html-fold.el
  ;; (install-elisp "https://github.com/ataka/html-fold/raw/master/html-fold.el")
  (require 'html-fold)
  (setq html-fold-inline-list
        '(("[a:" ("a"))
          ("[c:" ("code"))
          ("[k:" ("kbd"))
          ("[v:" ("var"))
          ("[s:" ("samp"))
          ("[ab:" ("abbr" "acronym"))
          ("[lab:" ("label"))
          ("[opt:" ("option"))
          ("[rss:" ("rss"))
          ("[link:" ("link"))
          ))
  (setq html-fold-block-list
        '("script" "style" "table"
          "description" "content"))
  (add-hook 'html-mode-hook 'html-fold-mode)
  
  
  ;; hideshow.el
  ;; (install-elisp "http://www.dur.ac.uk/p.j.heslin/Software/Emacs/Download/fold-dwim.el")
  (require 'hideshow)
  (require 'fold-dwim)
  
  
  ;; ipa.el
  ;; (install-elisp-from-emacswiki "ipa.el")
  (require 'ipa)
  (setq ipa-file "~/.emacs.d/state/ipa")
  
  
  ;; multiverse.el
  ;; (install-elisp-from-emacswiki "multiverse.el")
  (require 'multiverse)
#+end_src

* Key bindings
:PROPERTIES:
:ID: AD7E2844-9477-4F32-9663-62728383E286
:END:
#+begin_src emacs-lisp
(key-chord-define-global "jk" 'view-mode)
(key-chord-define-global "df" 'anything-for-files)
(key-chord-define-global "fm" 'follow-delete-other-windows-and-split)
#+end_src

#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

** Org-Mode Hook
The latest version of yasnippets doesn't play well with Org-mode, the
following function allows these two to play nicely together
#+begin_src emacs-lisp
  (defun yas/org-very-safe-expand ()
    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)
              ;; yasnippet (using the new org-cycle hooks)
              (make-variable-buffer-local 'yas/trigger-key)
              (setq yas/trigger-key [tab])
              (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              (define-key yas/keymap [tab] 'yas/next-field)
              ))
#+end_src

** Speed keys
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the `=org-speed-commands-default=' variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
#+end_src

** Code blocks
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sh . t)
     (R . t)
     (perl . t)
     (ruby . t)
     (python . t)
     (js . t)
     (haskell . t)
     (clojure . t)
     (ditaa . t)))
#+end_src

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+begin_src emacs-lisp :tangle no
  (setq org-confirm-babel-evaluate nil)
#+end_src

The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+end_src

** Load up the Library of Babel
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
[[file:src/org/contrib/babel/library-of-babel.org][library-of-babel.org]] file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.
#+begin_src emacs-lisp
  (org-babel-lob-ingest
   (expand-file-name
    "library-of-babel.org"
    (expand-file-name
     "babel"
     (expand-file-name
      "contrib"
      (expand-file-name
       "org"
       (expand-file-name "src" dotfiles-dir))))))
#+end_src

** Ensure the Latest Org-mode manual is in the info directory
By placing the =doc/= directory in Org-mode at the front of the
=Info-directory-list= we can be sure that the latest version of the
Org-mode manual is available to the =info= command (bound to =C-h i=).
#+begin_src emacs-lisp
  (if (boundp 'Info-directory-list)
      (setq Info-directory-list (append Info-directory-list
                                        Info-default-directory-list))
      (setq Info-directory-list Info-default-directory-list))
  (setq Info-directory-list
        (cons (expand-file-name
               "doc"
               (expand-file-name
                "org"
                (expand-file-name "src" dotfiles-dir)))
              Info-directory-list))
#+end_src

** Starter Kit Documentation
This code defines the =starter-kit-project= which is used to publish
the documentation for the Starter Kit to html.

#+begin_src emacs-lisp :results silent
  (unless (boundp 'org-publish-project-alist)
    (setq org-publish-project-alist nil))
  (let ((this-dir (file-name-directory (or load-file-name buffer-file-name))))
    (add-to-list 'org-publish-project-alist
                 `("starter-kit-documentation"
                   :base-directory ,this-dir
                   :base-extension "org"
                   :style "<link rel=\"stylesheet\" href=\"emacs.css\" type=\"text/css\"/>"
                   :publishing-directory ,this-dir
                   :index-filename "starter-kit.org"
                   :auto-postamble nil)))
#+end_src


* My own org-mode settings

#+begin_src emacs-lisp
(setq org-startup-indented t)

(defun org-insert-upheading (arg)
  "Insert upper level heading"
  (interactive "P")
  (org-insert-heading arg)
  (cond ((org-on-heading-p) (org-do-promote))
	((org-at-item-p) (org-indent-item -1))))
(defun org-insert-heading-dwim (arg)
  "Insert heading at the same level
C-u to upper, C-u C-u to down side."
  (interactive "p")
  (case arg
    (4 (org-insert-subheading nil))
    (16 (org-insert-upheading nil))
    (t (org-insert-heading nil))))
(define-key org-mode-map (kbd "<C-return>") 'org-insert-heading-dwim)
(define-key org-mode-map (kbd "<C-kp-enter>") 'org-insert-heading-dwim)

;; (org-remember-insinuate)
(setq org-directory "~/org/")
(setq org-default-notes-file (expand-file-name "memo.org" org-directory))
;; (setq org-remember-templates
;;       '(("Note" ?n "** %?\n   %i\n    %a\n    %T" nil "Inbox")
;; 	("Todo" ?t "** TODO %?\n    %i\n    %a\n    %T" nil "Inbox")))
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
	 "* TODO %?\n %i\n %a")
	("T" "Todo+" entry (file+headline "~/org/gtd.org" "Tasks")
	 "* TODO %?\n:LOGBOOK:\n- Created on %U\n:END:")
	("x" "org-protocol" entry (file+headline "~/org/gtd.org" "Org-protocol")
	 "* %:description\n\n  Source: %:link\n\n  %:initial" :immediate-finish t :empty-lines 1)
	("j" "Journal" entry (file+datetree "~/org/journal.org")
	 "* %?\nEntered on %U\n %i\n %a")))

(add-hook 'mail-mode-hook 'turn-on-orgtbl)

;; (setq org-use-fast-todo-selection t)
;; #+TODO: TODO | DONE
;; #+TODO: REPORT BUG KNOWNCAUSE | FIXED
;; #+TODO: | CANCELED
(setq org-todo-keywords
      '((sequence "TODO(t!)" "STARTED(s!)" "WAITING(w@/!)" "|" "DONE(x!)" "CANCEL(c@)")
	(sequence "APPT(a)" "|" "DONE(x)" "CANCEL(c)")))
;; (setq org-log-done 'note)
(setq org-log-into-drawer t)

;; (setq org-fast-tag-selection-single-key t)
;; #+TAGS: { @work(w)  @home(h)  @tennisclub(t) }  laptop(l)  pc(p)
(setq org-tag-alist '((:startgroup . nil)
		      ("@work" . ?w) ("@home" . ?h)
		      ("@tennisclub" . ?t)
		      (:endgroup . nil)
		      ("laptop" . ?l) ("pc" . ?p)))

(setq org-return-follows-link t)

(setq org-refile-targets '((nil . (:level . 1))
                           (org-agenda-files . (:level . 1))))

(setq org-archive-location "~/org/2011Q1.org::")

(setq org-feed-alist
      '(("Slashdot"
	 "http://rss.slashdot.org/Slashdot/slashdot"
	 "~/org/slashdot.org" "Slashdot Entries")
	("IKEDA Nobuo"
	 "http://ikedanobuo.livedoor.biz/index.rdf"
	 "~/org/ikenob.org" "IKEDA Nobuo Blog")))

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c b") 'org-iswitchb)
;; (global-set-key (kbd "C-c c") 'org-remember)
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

** MobileOrg

#+begin_src emacs-lisp
(require 'org-mobile)
(setq org-mobile-directory "~/Dropbox/MobileOrg")
(setq org-mobile-inbox-for-pull "~/org/from-mobile.org")
;; (setq org-mobile-use-encryption nil)
;; (setq org-mobile-encryption-password "")
(setq org-mobile-force-id-on-agenda-items nil)
#+end_src
